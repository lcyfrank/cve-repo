#ifndef _BPF_INSN_HELPER_H__
#define _BPF_INSN_HELPER_H__
#include <linux/bpf.h>


#define ALU_NEG BPF_ALU | BPF_NEG 
#define ALU_END_TO_BE BPF_ALU | BPF_END | BPF_TO_BE  
#define ALU_END_TO_LE BPF_ALU | BPF_END | BPF_TO_LE  
#define F_ALU64_ARSH_XBPF_ALU64 | BPF_ARSH | BPF_X 
#define F_ALU64_ARSH_KBPF_ALU64 | BPF_ARSH | BPF_K 
#define F_ALU64_NEG   BPF_ALU64 | BPF_NEG          

#define BPF_INSN_NEG \
    ((struct bpf_insn) { \
     .code = 0, \
     .dst_reg = 0, \
     .src_reg = 0, \
     .off = 0, \
     .imm = 0 \
    })


#define ALU_OP_K(OP,DST,IMM) \
    ((struct bpf_insn) { \
     .code = BPF_ALU | BPF_OP(OP) | BPF_K, \
     .dst_reg = DST, \
     .src_reg = 0, \
     .off = 0, \
     .imm = IMM \
    })

#define ALU_OP_X(OP,DST,SRC) \
    ((struct bpf_insn) { \
     .code = BPF_ALU | BPF_OP(OP) | BPF_X, \
     .dst_reg = DST, \
     .src_reg = SRC, \
     .off = 0, \
     .imm = 0 \
    })

#define ALU64_OP_K(OP,DST,IMM) \
    ((struct bpf_insn) { \
     .code = BPF_ALU64 | BPF_OP(OP) | BPF_K, \
     .dst_reg = DST, \
     .src_reg = 0, \
     .off = 0, \
     .imm = IMM \
    }) 

#define ALU64_OP_X(OP,DST,SRC) \
    ((struct bpf_insn) { \
     .code = BPF_ALU64 | BPF_OP(OP) | BPF_X, \
     .dst_reg = DST, \
     .src_reg = SRC, \
     .off = 0, \
     .imm = 0 \
    }) 


#define ALU_ADD_K(DST,IMM) ALU_OP_K(BPF_ADD,DST,IMM)
#define ALU_SUB_K(DST,IMM) ALU_OP_K(BPF_SUB,DST,IMM)
#define ALU_AND_K(DST,IMM) ALU_OP_K(BPF_AND,DST,IMM)
#define ALU_OR_K(DST,IMM) ALU_OP_K(BPF_OR,DST,IMM)
#define ALU_LSH_K(DST,IMM) ALU_OP_K(BPF_LSH,DST,IMM)
#define ALU_RSH_K(DST,IMM) ALU_OP_K(BPF_RSH,DST,IMM)
#define ALU_XOR_K(DST,IMM) ALU_OP_K(BPF_XOR,DST,IMM)
#define ALU_MUL_K(DST,IMM) ALU_OP_K(BPF_MUL,DST,IMM)
#define ALU_MOV_K(DST,IMM) ALU_OP_K(BPF_MOV,DST,IMM)
#define ALU_DIV_K(DST,IMM) ALU_OP_K(BPF_DIV,DST,IMM)
#define ALU_MOD_K(DST,IMM) ALU_OP_K(BPF_MOD,DST,IMM)

#define ALU_ADD_X(DST,SRC) ALU_OP_X(BPF_ADD,DST,SRC)
#define ALU_SUB_X(DST,SRC) ALU_OP_X(BPF_SUB,DST,SRC)
#define ALU_AND_X(DST,SRC) ALU_OP_X(BPF_AND,DST,SRC)
#define ALU_OR_X (DST,SRC) ALU_OP_X (BPF_OR,DST,SRC)
#define ALU_LSH_X(DST,SRC) ALU_OP_X(BPF_LSH,DST,SRC)
#define ALU_RSH_X(DST,SRC) ALU_OP_X(BPF_RSH,DST,SRC)
#define ALU_XOR_X(DST,SRC) ALU_OP_X(BPF_XOR,DST,SRC)
#define ALU_MUL_X(DST,SRC) ALU_OP_X(BPF_MUL,DST,SRC)
#define ALU_MOV_X(DST,SRC) ALU_OP_X(BPF_MOV,DST,SRC)
#define ALU_DIV_X(DST,SRC) ALU_OP_X(BPF_DIV,DST,SRC)
#define ALU_MOD_X(DST,SRC) ALU_OP_X(BPF_MOD,DST,SRC)

#define ALU64_ADD_K(DST,IMM) ALU64_OP_K(BPF_ADD,DST,IMM)
#define ALU64_SUB_K(DST,IMM) ALU64_OP_K(BPF_SUB,DST,IMM)
#define ALU64_AND_K(DST,IMM) ALU64_OP_K(BPF_AND,DST,IMM)
#define ALU64_OR_K(DST,IMM) ALU_64OP_K(BPF_OR,DST,IMM)
#define ALU64_LSH_K(DST,IMM) ALU64_OP_K(BPF_LSH,DST,IMM)
#define ALU64_RSH_K(DST,IMM) ALU64_OP_K(BPF_RSH,DST,IMM)
#define ALU64_XOR_K(DST,IMM) ALU64_OP_K(BPF_XOR,DST,IMM)
#define ALU64_MUL_K(DST,IMM) ALU64_OP_K(BPF_MUL,DST,IMM)
#define ALU64_MOV_K(DST,IMM) ALU64_OP_K(BPF_MOV,DST,IMM)
#define ALU64_DIV_K(DST,IMM) ALU64_OP_K(BPF_DIV,DST,IMM)
#define ALU64_MOD_K(DST,IMM) ALU64_OP_K(BPF_MOD,DST,IMM)

#define ALU64_ADD_X(DST,SRC) ALU64_OP_X(BPF_ADD,DST,SRC)
#define ALU64_SUB_X(DST,SRC) ALU64_OP_X(BPF_SUB,DST,SRC)
#define ALU64_AND_X(DST,SRC) ALU64_OP_X(BPF_AND,DST,SRC)
#define ALU64_OR_X (DST,SRC) ALU64_OP_X (BPF_OR,DST,SRC)
#define ALU64_LSH_X(DST,SRC) ALU64_OP_X(BPF_LSH,DST,SRC)
#define ALU64_RSH_X(DST,SRC) ALU64_OP_X(BPF_RSH,DST,SRC)
#define ALU64_XOR_X(DST,SRC) ALU64_OP_X(BPF_XOR,DST,SRC)
#define ALU64_MUL_X(DST,SRC) ALU64_OP_X(BPF_MUL,DST,SRC)
#define ALU64_MOV_X(DST,SRC) ALU64_OP_X(BPF_MOV,DST,SRC)
#define ALU64_DIV_X(DST,SRC) ALU64_OP_X(BPF_DIV,DST,SRC)
#define ALU64_MOD_X(DST,SRC) ALU64_OP_X(BPF_MOD,DST,SRC)


#define JMP_OP_K(OP,DST,IMM,OFF) \
    ((struct bpf_insn) { \
     .code = BPF_JMP | BPF_OP(OP) | BPF_K, \
     .dst_reg = DST, \
     .src_reg = 0, \
     .off = OFF, \
     .imm = IMM \
    })

#define JMP_OP_X(OP,DST,SRC,OFF) \
    ((struct bpf_insn) { \
     .code = BPF_JMP | BPF_OP(OP) | BPF_X, \
     .dst_reg = DST, \
     .src_reg = SRC, \
     .off = OFF, \
     .imm = 0 \
    })
#define F_JMP_JA     BPF_JMP | BPF_JA            
#define F_JMP_CALL       BPF_JMP | BPF_CALL         
#define F_JMP_TAIL_CALL  BPF_JMP | BPF_CALL | BPF_X 


#define JMP_EXIT() \
    ((struct bpf_insn) { \
     .code = BPF_JMP | BPF_EXIT, \
     .dst_reg = 0, \
     .src_reg = 0, \
     .off = 0, \
     .imm = 0 \
    })
#define JMP_CALL(FUNC) \
    ((struct bpf_insn) { \
     .code = BPF_JMP | BPF_CALL, \
     .dst_reg = 0, \
     .src_reg = 0, \
     .off = 0, \
     .imm = FUNC \
    })

#define JMP_JNE_K(DST,IMM,OFF) JMP_OP_K(BPF_JNE,DST,IMM,OFF)
#define JMP_JEQ_K(DST,IMM,OFF) JMP_OP_K(BPF_JEQ,DST,IMM,OFF)
#define JMP_JGT_K(DST,IMM,OFF) JMP_OP_K(BPF_JGT,DST,IMM,OFF)
#define JMP_JGE_K(DST,IMM,OFF) JMP_OP_K(BPF_JGE,DST,IMM,OFF)
#define JMP_JSGT_K(DST,IMM,OFF) JMP_OP_K(BPF_JSGT,DST,IMM,OFF)
#define JMP_JSGE_K(DST,IMM,OFF) JMP_OP_K(BPF_JSGE,DST,IMM,OFF)
#define JMP_JSET_K(DST,IMM,OFF) JMP_OP_K(BPF_JSET,DST,IMM,OFF)

#define JMP_JNE_X(DST,SRC,OFF) JMP_OP_X(BPF_JNE,DST,SRC,OFF)
#define JMP_JEQ_X(DST,SRC,OFF) JMP_OP_X(BPF_JEQ,DST,SRC,OFF)
#define JMP_JGT_X(DST,SRC,OFF) JMP_OP_X(BPF_JGT,DST,SRC,OFF)
#define JMP_JGE_X(DST,SRC,OFF) JMP_OP_X(BPF_JGE,DST,SRC,OFF)
#define JMP_JSGT_X(DST,SRC,OFF) JMP_OP_X(BPF_JSGT,DST,SRC,OFF)
#define JMP_JSGE_X(DST,SRC,OFF) JMP_OP_X(BPF_JSGE,DST,SRC,OFF)
#define JMP_JSET_X(DST,SRC,OFF) JMP_OP_X(BPF_JSET,DST,SRC,OFF)
#define JMP_CALL_X(DST,SRC,OFF) JMP_OP_X(BPF_CALL,0,0,OFF)

// [ det_reg + off ] =  src
#define STX_MEM_OP(SIZE,DST,OFF,SRC) \
    ((struct bpf_insn) { \
     .code = BPF_STX | BPF_MEM | BPF_SIZE(SIZE) , \
     .dst_reg = DST, \
     .src_reg = SRC, \
     .off = OFF, \
     .imm = 0 \
    })

// [ dst_reg + off ] = IMM
#define ST_MEM_OP(SIZE,DST,OFF,IMM) \
    ((struct bpf_insn) { \
     .code = BPF_ST | BPF_MEM | BPF_SIZE(SIZE) , \
     .dst_reg = DST, \
     .src_reg = 0, \
     .off = OFF, \
     .imm = IMM \
    })

#define STX_XADD_W BPF_STX | BPF_XADD | BPF_W  
#define STX_XADD_DWBPF_STX | BPF_XADD | BPF_DW 
#define ST_MEM_B(DST,OFF,IMM) ST_MEM_OP(BPF_B,DST,OFF,IMM)
#define ST_MEM_H(DST,OFF,IMM) ST_MEM_OP(BPF_H,DST,OFF,IMM)
#define ST_MEM_W(DST,OFF,IMM) ST_MEM_OP(BPF_W,DST,OFF,IMM)
#define ST_MEM_DW(DST,OFF,IMM) ST_MEM_OP(BPF_DW,DST,OFF,IMM)

#define STX_MEM_B(DST,OFF,SRC)    STX_MEM_OP(BPF_B,DST,OFF,SRC)
#define STX_MEM_H(DST,OFF,SRC)    STX_MEM_OP(BPF_H,DST,OFF,SRC)
#define STX_MEM_W(DST,OFF,SRC)    STX_MEM_OP(BPF_W,DST,OFF,SRC)
#define STX_MEM_DW(DST,OFF,SRC)  STX_MEM_OP(BPF_DW,DST,OFF,SRC)

#define LD_ABS_W  BPF_LD | BPF_ABS | BPF_W   
#define LD_ABS_H  BPF_LD | BPF_ABS | BPF_H   
#define LD_ABS_B  BPF_LD | BPF_ABS | BPF_B   
#define LD_IND_W  BPF_LD | BPF_IND | BPF_W   
#define LD_IND_H  BPF_LD | BPF_IND | BPF_H   
#define LD_IND_B  BPF_LD | BPF_IND | BPF_B   


// dst_reg =  [src_reg + off ]
#define LDX_MEM_OP(SIZE,DST,SRC,OFF) \
    ((struct bpf_insn) { \
     .code = BPF_LDX | BPF_MEM | BPF_SIZE(SIZE) , \
     .dst_reg = DST, \
     .src_reg = SRC, \
     .off = OFF, \
     .imm = 0 \
    })

// [ src_reg + off ] = IMM
#define LD_MEM_OP(MODE,SIZE,DST,SRC,IMM) \
    ((struct bpf_insn) { \
     .code = BPF_LD | BPF_MODE(MODE) | BPF_SIZE(SIZE) , \
     .dst_reg = DST, \
     .src_reg = SRC, \
     .off = 0, \
     .imm = IMM \
    })

#define LD_IMM_DW(DST,SRC,IMM) LD_MEM_OP(BPF_IMM,BPF_DW,DST,SRC,IMM)


#define LDX_MEM_B(DST,SRC,OFF)   LDX_MEM_OP(BPF_B,DST,SRC,OFF)
#define LDX_MEM_H(DST,SRC,OFF)   LDX_MEM_OP(BPF_H,DST,SRC,OFF)
#define LDX_MEM_W(DST,SRC,OFF)   LDX_MEM_OP(BPF_W,DST,SRC,OFF)
#define LDX_MEM_DW(DST,SRC,OFF) LDX_MEM_OP(BPF_DW,DST,SRC,OFF)

#endif
