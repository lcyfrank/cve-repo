diff --git a/Source/JavaScriptCore/CMakeLists.txt b/Source/JavaScriptCore/CMakeLists.txt
index c8fec946b57..458f173995f 100644
--- a/Source/JavaScriptCore/CMakeLists.txt
+++ b/Source/JavaScriptCore/CMakeLists.txt
@@ -94,6 +94,7 @@ set(JavaScriptCore_OBJECT_LUT_SOURCES
     runtime/StringPrototype.cpp
     runtime/SymbolConstructor.cpp
     runtime/SymbolPrototype.cpp
+       runtime/FastStructureCache.cpp

     wasm/js/JSWebAssembly.cpp
     wasm/js/JSToWasmICCallee.cpp
@@ -1024,6 +1025,7 @@ set(JavaScriptCore_PRIVATE_FRAMEWORK_HEADERS
     runtime/WeakGCMapInlines.h
     runtime/WriteBarrier.h
     runtime/WriteBarrierInlines.h
+       runtime/FastStructureCache.h

     tools/Integrity.h
     tools/IntegrityInlines.h
diff --git a/Source/JavaScriptCore/runtime/FastStructureCache.cpp b/Source/JavaScriptCore/runtime/FastStructureCache.cpp
new file mode 100644
index 00000000000..967ac438659
--- /dev/null
+++ b/Source/JavaScriptCore/runtime/FastStructureCache.cpp
@@ -0,0 +1,10 @@
+#include "FastStructureCache.h"
+
+namespace JSC {
+
+FastStructureCache::FastStructureCache(VM& vm, Structure* structure)
+    : JSNonFinalObject(vm, structure)
+{
+}
+
+}
diff --git a/Source/JavaScriptCore/runtime/FastStructureCache.h b/Source/JavaScriptCore/runtime/FastStructureCache.h
new file mode 100644
index 00000000000..8ff8bc3ef93
--- /dev/null
+++ b/Source/JavaScriptCore/runtime/FastStructureCache.h
@@ -0,0 +1,61 @@
+/*
+ *  Copyright (C) 1999-2000 Harri Porten (porten@kde.org)
+ *  Copyright (C) 2003-2019 Apple Inc. All Rights Reserved.
+ *
+ *  This library is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU Lesser General Public
+ *  License as published by the Free Software Foundation; either
+ *  version 2 of the License, or (at your option) any later version.
+ *
+ *  This library is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  Lesser General Public License for more details.
+ *
+ *  You should have received a copy of the GNU Lesser General Public
+ *  License along with this library; if not, write to the Free Software
+ *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ */
+
+#pragma once
+
+#include "JSObject.h"
+#include "Structure.h"
+
+namespace JSC {
+
+class FastStructureCache final : public JSNonFinalObject {
+public:
+    using Base = JSNonFinalObject;
+    static Structure** fastCacheStructure;
+    static uint64_t fastCacheSizeMax;
+    static uint64_t fastCacheSizeUsed;
+
+    static Structure* createStructureFastPath(VM& vm, JSGlobalObject* globalObject, JSValue prototype, const TypeInfo& typeInfo, const ClassInfo* classInfo)
+    {
+        if (fastCacheStructure == NULL) {
+            fastCacheStructure = new Structure*[fastCacheSizeMax];
+            uint64_t idx = 0;
+            while (idx < fastCacheSizeMax) {
+                // Later, we will set the correct globalObject and prototype
+                fastCacheStructure[idx] = Structure::create(vm, globalObject, prototype, typeInfo, classInfo);
+                idx++;
+            }
+        }
+        if (fastCacheSizeUsed < fastCacheSizeMax) {
+            Structure* return_value = fastCacheStructure[fastCacheSizeUsed];
+            // set the correct global object and prototype
+            return_value->setPrototypeWithoutTransition(vm, prototype);
+            return_value->setGlobalObject(vm, globalObject);
+            fastCacheSizeUsed += 1;
+            return return_value;
+        }
+        return Structure::create(vm, globalObject, prototype, typeInfo, classInfo);
+    }
+
+protected:
+    FastStructureCache(VM&, Structure* structure);
+};
+
+} // namespace JSC
diff --git a/Source/JavaScriptCore/runtime/RegExpObject.h b/Source/JavaScriptCore/runtime/RegExpObject.h
index a56c0acf98b..733dc6170dd 100644
--- a/Source/JavaScriptCore/runtime/RegExpObject.h
+++ b/Source/JavaScriptCore/runtime/RegExpObject.h
@@ -20,13 +20,14 @@

 #pragma once

+#include "FastStructureCache.h"
 #include "JSObject.h"
 #include "RegExp.h"
 #include "ThrowScope.h"
 #include "TypeError.h"

 namespace JSC {
-
+
 class RegExpObject final : public JSNonFinalObject {
 public:
     using Base = JSNonFinalObject;
@@ -102,7 +103,7 @@ public:

     static Structure* createStructure(VM& vm, JSGlobalObject* globalObject, JSValue prototype)
     {
-        return Structure::create(vm, globalObject, prototype, TypeInfo(RegExpObjectType, StructureFlags), info());
+        return FastStructureCache::createStructureFastPath(vm, globalObject, prototype, TypeInfo(RegExpObjectType, StructureFlags), info());
     }

     static ptrdiff_t offsetOfRegExpAndLastIndexIsNotWritableFlag()
diff --git a/Source/JavaScriptCore/runtime/RegExpPrototype.cpp b/Source/JavaScriptCore/runtime/RegExpPrototype.cpp
index 2a103ab0bf4..80c346fab45 100644
--- a/Source/JavaScriptCore/runtime/RegExpPrototype.cpp
+++ b/Source/JavaScriptCore/runtime/RegExpPrototype.cpp
@@ -56,6 +56,10 @@ static EncodedJSValue JSC_HOST_CALL regExpProtoGetterFlags(JSGlobalObject*, Call

 const ClassInfo RegExpPrototype::s_info = { "Object", &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(RegExpPrototype) };

+Structure** FastStructureCache::fastCacheStructure = NULL;
+uint64_t FastStructureCache::fastCacheSizeMax = 16;
+uint64_t FastStructureCache::fastCacheSizeUsed = 0;
+
 RegExpPrototype::RegExpPrototype(VM& vm, Structure* structure)
     : JSNonFinalObject(vm, structure)
 {
diff --git a/Source/JavaScriptCore/runtime/RegExpPrototype.h b/Source/JavaScriptCore/runtime/RegExpPrototype.h
index 460e2a45add..116826270ae 100644
--- a/Source/JavaScriptCore/runtime/RegExpPrototype.h
+++ b/Source/JavaScriptCore/runtime/RegExpPrototype.h
@@ -20,6 +20,7 @@

 #pragma once

+#include "FastStructureCache.h"
 #include "JSObject.h"
 #include "RegExp.h"

@@ -41,7 +42,7 @@ public:

     static Structure* createStructure(VM& vm, JSGlobalObject* globalObject, JSValue prototype)
     {
-        return Structure::create(vm, globalObject, prototype, TypeInfo(ObjectType, StructureFlags), info());
+        return FastStructureCache::createStructureFastPath(vm, globalObject, prototype, TypeInfo(ObjectType, StructureFlags), info());
     }

 protected:

